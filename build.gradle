buildscript {
	repositories {
		mavenLocal()
/*		mavenRepo urls: 'https://oss.sonatype.org/content/repositories/snapshots'*/
		mavenCentral()
	}
	dependencies {
		classpath 'com.eriwen:gradle-css-plugin:0.1-SNAPSHOT'
		classpath 'com.eriwen:gradle-js-plugin:0.1-SNAPSHOT'
	}
}

apply plugin: 'maven' //What does this do here again?
apply plugin: 'css'
apply plugin: 'js'

defaultTasks 'all'
buildDir = 'target'

// Short version string that which we can reverse engineer the date from
def versionFormat = new java.text.SimpleDateFormat('yyDDHHmm')
def version = Integer.toHexString(Integer.parseInt(versionFormat.format(new Date())))
def phpSrcDir = "wp-content/themes/starkers3"
def cssOutputFile = "all.${version}-min.css"
def jsOutputFile = "all.${version}-min.js"
def testDir = file("${projectDir}/test")

repositories {
	mavenRepo urls: 'http://repository.springsource.com/maven/bundles/release'
	mavenCentral()
}

configurations {
	s3libs
	html
}

dependencies {
	s3libs 'org.springframework.build:org.springframework.build.aws.ant:3.0.5.RELEASE',
			'net.java.dev.jets3t:jets3t:0.7.3'
	html 'com.googlecode.htmlcompressor:htmlcompressor:1.4'
}

task init(type: Directory, description: 'Creates artifact directories') {
	// FIXME: this is idiotic, but necessary because the Exec tasks 
	// check directory existence in the configuration phase of the build
	file(buildDir).mkdirs()
	doLast {
		file(buildDir).mkdirs()
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.0-milestone-4'
}

task jshint(type: Exec, dependsOn: 'init', description: 'runs jshint on all non-test and lib JS files') {
	inputs.file file('js/main.js')
	outputs.file file("${buildDir}/jshint.xml")
	
	def inputFile = 'js/main.js'
	def jshintConfig = 'jshint.json'
	
	commandLine = ["jshint", inputFile, "--config", jshintConfig, "--jslint-reporter"]
	standardOutput = new BufferedOutputStream(new FileOutputStream("${buildDir}/jshint.xml"))
}

task csslint(type: Exec, dependsOn: 'init', description: 'runs csslint on all relevant CSS files') {
	inputs.file file('css/style.css')
	outputs.file file("${buildDir}/csslint.xml")
	new File("${buildDir}/csslint.xml").write('')
	
	def csslintRules = ['adjoining-classes', 'box-model', 'display-property', 'grouping',
		'empty-rules', 'errors', 'floats', 'font-faces', 'font-sizes', 'gradients', 'important',
		'overqualified-elements', 'regex-selectors', 'rules-count', 'vendor-prefix', 'width-100',
		'zero-units']
	
	commandLine = ["csslint", "--rules=${csslintRules.join(',')}", "--format=lint-xml", "css/style.css"]
	standardOutput = new BufferedOutputStream(new FileOutputStream(file("${buildDir}/csslint.xml")))
}

task test(dependsOn: 'init', description: 'runs Javascript unit tests with Jasmine and PhantomJS') {
	inputs.dir file("${projectDir}/js")
	outputs.dir file(buildDir)
	
	doLast {
		def specs = []
		testDir.eachFile {
			if (it.name.endsWith('.html')) {
				specs << it
			}
		}

		def startTime = new Date().time
		def numFailures = 0
		def testsFailed = false
		
		specs.each { File spec ->
			println "Running ${spec.name}..."
			
			def outputFile = "${buildDir}/TEST-${spec.name.replace('-', '').replace('.html', '.xml')}"
			ant.exec(outputproperty: 'cmdOut', errorproperty: 'cmdErr',
					resultproperty: 'exitCode', failonerror: 'false', executable: '/usr/bin/env') {
				arg(value: 'DISPLAY=:1')
				arg(value: '/usr/local/bin/phantomjs')
				arg(value: "${projectDir}/test/lib/phantomjs-jasmine-runner.js")
				arg(value: "${spec.canonicalPath}")
			}
			// Check exit code
			if (ant.project.properties.exitCode != '0') {
				testsFailed = true
				numFailures++
				println '\tFAILED'
			} else {
				println '\tPASSED'
			}
	
			file(outputFile).write(ant.project.properties.cmdOut)
		}
		
		println "Jasmine tests completed in ${new Date().time - startTime}ms"
		println "Jasmine Tests ${testsFailed ? 'FAILED' : 'PASSED'} - view reports in ${buildDir}"
		ant.fail(if: testsFailed, message: 'JS Tests Failed')
	}
}

processCss {
	dependsOn << 'init'
	inputs.dir file("${projectDir}/css")
	outputs.dir file("${buildDir}/${cssOutputFile}")

	input = files("${projectDir}/css")
	output = file("${buildDir}/${cssOutputFile}")
	lineBreakPos = 0
}

processJs {
	dependsOn << 'init'
	inputs.dir file("${projectDir}/js")
	outputs.dir file("${buildDir}/${jsOutputFile}")

	input = fileTree(dir: "${projectDir}/js", include: "**/*.js", excludes: ["html5-min.js", "sh.3-min.js"])
	output = file("${buildDir}/${jsOutputFile}")
	warningLevel = 'QUIET'
}

task minifyHtml(description: 'minify HTML in different parts of template') {}

task updateIncludes(dependsOn: ['processCss', 'processJs'], description: 'Update header.php and footer.php with new CSS/JS versions') {
	inputs.files files("${projectDir}/js", "${projectDir}/css")
	outputs.files files("${phpSrcDir}/header.php", "${phpSrcDir}/footer.php")
	
	def headerFile = file("${phpSrcDir}/header.php")
	def newHeaderContent = headerFile.text.replaceAll(/all\.[0-9a-f]+/, "all.${version}")
	def footerFile = file("${phpSrcDir}/footer.php")
	def newFooterContent = footerFile.text.replaceAll(/all\.[0-9a-f]+/, "all.${version}")
	
	doLast {
		headerFile.write(newHeaderContent)
		footerFile.write(newFooterContent)
	}
}

task uploadArtifactsToS3(description: 'Uploads CSS and JS to AWS S3') {
	inputs.files files("${phpSrcDir}/header.php", "${phpSrcDir}/footer.php")
	
	doLast {
		project.ant {
			ant.taskdef(resource: 'org/springframework/build/aws/ant/antlib.xml',
			 	classpath: configurations.s3libs.asPath)
			// NOTE: Keys defined in secret gradle.properties file
			s3(accessKey: accesskey, secretKey: secretkey) {
				upload(bucketName: 'eriwen-cdn', file: "${buildDir}/${cssOutputFile}",
						toFile: "css/${cssOutputFile}", publicRead: 'true') {
					metadata(name: 'Content-Type', value: 'text/css')
					metadata(name: 'Cache-Control', value: 'public')
					metadata(name: 'Expires', value: 'Thu, 16 Apr 2015 20:00:00 GMT')
					metadata(name: 'Content-Encoding', value: 'gzip')
					metadata(name: 'Vary', value: 'Accept-Encoding')
				}
				upload(bucketName: 'eriwen-cdn', file: "${buildDir}/${jsOutputFile}",
						toFile: "js/${jsOutputFile}", publicRead: 'true') {
					metadata(name: 'Content-Type', value: 'text/javascript')
					metadata(name: 'Cache-Control', value: 'public')
					metadata(name: 'Expires', value: 'Thu, 16 Apr 2015 20:00:00 GMT')
					metadata(name: 'Content-Encoding', value: 'gzip')
					metadata(name: 'Vary', value: 'Accept-Encoding')
				}
			}
		}
	}
}

task all(dependsOn: ['jshint', 'csslint', 'updateIncludes', 'test', 'uploadArtifactsToS3']) {
	doLast {
		println "Time to do 'git commit -am \"Releasing version ${version}\" && git push origin master'"
	}
}