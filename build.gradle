defaultTasks 'all'

// Short version string that which we can reverse engineer the date from
def versionFormat = new java.text.SimpleDateFormat('yyDDHHmm')
def version = Integer.toHexString(Integer.parseInt(versionFormat.format(new Date())))
def phpSrcDir = "wp-content/themes/starkers3"
def outputDir = 'target'
def cssOutputDir = "${outputDir}/css"
def cssOutputFile = "all.${version}-min.css"
def jsOutputDir = "${outputDir}/js"
def jsOutputFile = "all.${version}-min.js"
def testDir = file("${projectDir}/test")

repositories {
	mavenRepo urls: 'http://repository.springsource.com/maven/bundles/release'
	mavenCentral()
}

configurations {
	s3libs
	js
	css
	html
}

dependencies {
	s3libs 'org.springframework.build:org.springframework.build.aws.ant:3.0.5.RELEASE',
			'net.java.dev.jets3t:jets3t:0.7.3'
	html 'com.googlecode.htmlcompressor:htmlcompressor:1.4'
	js 'com.google.javascript:closure-compiler:r1352'
	css 'com.yahoo.platform.yui:yuicompressor:2.4.6'
}
/*
sourceSets {
	main {
		test 'test'
	}
}*/

task clean(type: Delete, description: 'Cleans old artifacts') {
	delete outputDir
}

task init(type: Directory, description: 'Creates artifact output directories') {
	doLast {
		(file(cssOutputDir)).mkdirs()
		(file(jsOutputDir)).mkdirs()
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.0-milestone-4'
}

task jshint(type: Exec, dependsOn: 'init', description: 'runs jshint on all non-test and lib JS files') {
/*	inputs.file = file('js/main.js')*/
/*	outputs.file = "${outputDir}/jshint.xml"*/
	
	def inputFile = 'js/main.js'
	def jshintConfig = 'jshint.json'
	
	commandLine = ["jshint", inputFile, "--config", jshintConfig, "--jslint-reporter"]
	standardOutput = new BufferedOutputStream(new FileOutputStream(file("${outputDir}/jshint.xml")))
}

task csslint(dependsOn: 'init', description: 'runs csslint on all relevant CSS files') {
/*	input.file = 'css/style.css'*/
/*	output.file = "${outputDir}/csslint.xml"*/
	
	def csslintRules = ['adjoining-classes', 'box-model', 'display-property', 'grouping',
		'empty-rules', 'errors', 'floats', 'font-faces', 'font-sizes', 'gradients', 'important',
		'overqualified-elements', 'regex-selectors', 'rules-count', 'vendor-prefix', 'width-100',
		'zero-units']
	def csslintOptions = "--rules=${csslintRules.join(',')} --format=lint-xml"
	
	def sout = new StringBuffer()
	def serr = new StringBuffer()
	def command = "csslint ${csslintOptions} css/style.css"
	
	doLast {
		println command
		file("${outputDir}/csslint.xml").write(command.execute().text)
	}
}

task test(dependsOn: 'init', description: 'runs Javascript unit tests with Jasmine and PhantomJS') {
	def specs = []
	testDir.eachFile {
		if (it.name.endsWith('.html')) {
			specs << it
		}
	}
	
	def startTime = new Date().time
	def numFailures = 0
	def testsFailed = false
	
	/*classpath = configurations.js.asPath
	testResultsDir = "${outputDir}/results"
	testReportsDir = "${outputDir}/reports"
	*/
	doLast {
		specs.each { File spec ->
			println "Running ${spec.name}..."
			
			def outputFile = "${outputDir}/TEST-${spec.name.replace('-', '').replace('.html', '.xml')}"
			ant.exec(outputproperty: 'cmdOut', errorproperty: 'cmdErr',
					resultproperty: 'exitCode', failonerror: 'false', executable: '/usr/bin/env') {
				arg(value: 'DISPLAY=:1')
				arg(value: '/usr/local/bin/phantomjs')
				arg(value: "${projectDir}/test/lib/phantomjs-jasmine-runner.js")
				arg(value: "${spec.canonicalPath}")
			}
			// Check exit code
			if (ant.project.properties.exitCode != '0') {
				testsFailed = true
				numFailures++
				println '\tFAILED'
			} else {
				println '\tPASSED'
			}
	
			file(outputFile).write(ant.project.properties.cmdOut)
		}
		
		println "Jasmine tests completed in ${new Date().time - startTime}ms"
		println "Jasmine Tests ${testsFailed ? 'FAILED' : 'PASSED'} - view reports in ${outputDir}"
		ant.fail(if: testsFailed, message: 'JS Tests Failed')
	}
}

task combineCss(dependsOn: 'init') {
	doLast {
		ant.concat(destfile: "${cssOutputDir}/all.${version}.css") {
			fileset(dir: "${projectDir}/css", includes: '*.css')
		}
	}
}

task combineJs(dependsOn: 'init') {
	doLast {
		ant.concat(destfile: "${jsOutputDir}/all.${version}.js") {
			filelist(dir: "${projectDir}/js", files: 'main.js, stacktrace.js, comment-reply.js')
			filelist(dir: "${projectDir}/js/sh", files: 'shCore.js, shBrushBash.js, shBrushCss.js, shBrushGroovy.js, shBrushJava.js, shBrushJavaFX.js, shBrushJScript.js, shBrushPlain.js, shBrushPython.js, shBrushXml.js')
		}
	}
}

task minifyHtml(description: 'minify HTML in different parts of template') {}

task minifyCss(dependsOn: 'combineCss', description: 'minify combined CSS file') {
	doLast {
		ant.java(jar: 'lib/yuicompressor-2.4.6.jar', fork: true) {
			arg(value: '--line-break')
			arg(value: '0')
			arg(value: "${cssOutputDir}/all.${version}.css")
			arg(value: '-o')
			arg(value: "${cssOutputDir}/${cssOutputFile}")
		}
		ant.gzip(src: "${cssOutputDir}/${cssOutputFile}",
				destfile: "${cssOutputDir}/${cssOutputFile}.gz")
		ant.move(file: "${cssOutputDir}/${cssOutputFile}.gz",
				tofile: "${cssOutputDir}/${cssOutputFile}")
	}
}

task minifyJs(dependsOn: 'combineJs', description: 'minify combined JS file') {
	def minifiedFilePath = "${jsOutputDir}/${jsOutputFile}"
	
	doLast {
		project.ant {
			ant.taskdef(name: 'jscomp',  classname: 'com.google.javascript.jscomp.ant.CompileTask', classpath: configurations.js.asPath)
			jscomp(compilationLevel: 'simple', warning: 'quiet', debug: 'false', output: minifiedFilePath) {
				sources(dir: jsOutputDir) {
					file(name: "all.${version}.js"){}
				}
			}
		}
		ant.gzip(src: minifiedFilePath, destfile: "${jsOutputDir}/all.${version}-min.js.gz")
		ant.move(file: "${jsOutputDir}/all.${version}-min.js.gz", tofile: minifiedFilePath)
	}
}

task updateIncludes(dependsOn: ['minifyCss', 'minifyJs'], description: 'Update header.php and footer.php with new CSS/JS versions') {
	def headerFile = file("${phpSrcDir}/header.php")
	def newHeaderContent = headerFile.text.replaceAll(/all\.[0-9a-f]+/, "all.${version}")
	def footerFile = file("${phpSrcDir}/footer.php")
	def newFooterContent = footerFile.text.replaceAll(/all\.[0-9a-f]+/, "all.${version}")
	
	doLast {
		headerFile.write(newHeaderContent)
		footerFile.write(newFooterContent)
	}
}

task uploadArtifactsToS3(description: 'Uploads CSS and JS to AWS S3') {
	doLast {
		project.ant {
			ant.taskdef(resource: 'org/springframework/build/aws/ant/antlib.xml',
			 	classpath: configurations.s3libs.asPath)
			// NOTE: Keys defined in secret gradle.properties file
			s3(accessKey: accesskey, secretKey: secretkey) {
				upload(bucketName: 'eriwen-cdn', file: "${cssOutputDir}/${cssOutputFile}",
						toFile: "css/${cssOutputFile}", publicRead: 'true') {
					metadata(name: 'Content-Type', value: 'text/css')
					metadata(name: 'Cache-Control', value: 'public')
					metadata(name: 'Expires', value: 'Thu, 16 Apr 2015 20:00:00 GMT')
					metadata(name: 'Content-Encoding', value: 'gzip')
					metadata(name: 'Vary', value: 'Accept-Encoding')
				}
				upload(bucketName: 'eriwen-cdn', file: "${jsOutputDir}/${jsOutputFile}",
						toFile: "js/${jsOutputFile}", publicRead: 'true') {
					metadata(name: 'Content-Type', value: 'text/javascript')
					metadata(name: 'Cache-Control', value: 'public')
					metadata(name: 'Expires', value: 'Thu, 16 Apr 2015 20:00:00 GMT')
					metadata(name: 'Content-Encoding', value: 'gzip')
					metadata(name: 'Vary', value: 'Accept-Encoding')
				}
			}
		}
	}
}

task all(dependsOn: ['clean', 'jshint', 'csslint', 'test', 'updateIncludes', 'uploadArtifactsToS3']) {
	doLast {
		println "Time to do 'git commit -am \"Releasing version ${version}\" && git push origin master'"
	}
}