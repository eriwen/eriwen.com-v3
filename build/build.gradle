defaultTasks 'all'

// Short version string that which we can reverse engineer the date from
def versionFormat = new java.text.SimpleDateFormat('yyDDHHmm')
def version = Integer.toHexString(Integer.parseInt(versionFormat.format(new Date())))
def srcDir = '..'
def phpSrcDir = "wp-content/themes/starkers3"
def outputDir = 'target'
def cssOutputDir = "${outputDir}/css"
def cssOutputFile = "all.${version}-min.css"
def jsOutputDir = "${outputDir}/js"
def jsOutputFile = "all.${version}-min.js"
def jshintConfig = 'build/jshint.json'
def jshintOutput = 'jshint.xml'
def csslintOutput = 'csslint.xml'
def testDir = 'test'

repositories {
	mavenRepo urls: 'http://repository.springsource.com/maven/bundles/release'
	mavenCentral()
}

configurations {
	antlibs
}

dependencies {
	antlibs 'org.springframework.build:org.springframework.build.aws.ant:3.0.5.RELEASE',
			'net.java.dev.jets3t:jets3t:0.7.3'
}

task clean << {
	description = 'Cleans old artifacts'
	ant.delete(dir: outputDir)
	ant.delete(file: jshintOutput)
}

task init << {
	description = 'Creates artifact output directories'
	(new File(cssOutputDir)).mkdirs()
	(new File(jsOutputDir)).mkdirs()
}

task jshint(dependsOn: 'clean') << {
	description = 'runs jshint on all non-test and lib JS files'
	def jsPattern = ~/.*main\.js/
	def jsFiles = [];
	new File("js").eachFileRecurse {
		if (it.canonicalPath =~ jsPattern) {
	    	jsFiles << it.canonicalPath
		}
	}

	def command = "jshint ${jsFiles.join(' ')} --config ${jshintConfig} --jslint-reporter"
	println command
	new File(jshintOutput).write(command.execute().text)
}

task csslint(dependsOn: 'clean') << {
	description = 'runs csslint on all relevant CSS files'
	def csslintRules = ['adjoining-classes', 'box-model', 'display-property', 'grouping',
		'empty-rules', 'errors', 'floats', 'font-faces', 'font-sizes', 'gradients', 'important',
		'overqualified-elements', 'regex-selectors', 'rules-count', 'vendor-prefix', 'width-100',
		'zero-units']
	def csslintOptions = "--rules=${csslintRules.join(',')} --format=jslint-xml"
	
	def sout = new StringBuffer()
	def serr = new StringBuffer()
	def command = "csslint ${csslintOptions} css/style.css"
	println command
	def proc = command.execute()
	proc.consumeProcessOutput(sout, serr)
	proc.waitForOrKill(2000)
	new File("csslint.xml").write(sout.toString())
}

task test(dependsOn: 'init') << {
	def specs = []
	new File(testDir).eachFile {
		if (it.name.endsWith('.html')) {
			specs << it
		}
	}
	
	def startTime = new Date().time
	def numFailures = 0
	def testsFailed = false
	specs.each { File spec ->
		println "Running ${spec.name}..."
		
		def outputFile = "${outputDir}/TEST-${spec.name.replace('-', '').replace('.html', '.xml')}"
		ant.exec(outputproperty: 'cmdOut', errorproperty: 'cmdErr',
				resultproperty: 'exitCode', failonerror: 'true', executable: '/usr/local/bin/phantomjs') {
			arg(value: "../test/lib/phantomjs-jasmine-runner.js")
			arg(value: "${spec.canonicalPath}")
		}
		// Check exit code
		if (ant.project.properties.exitCode != '0') {
			testsFailed = true
			numFailures++
			println '\tFAILED'
		} else {
			println '\tPASSED'
		}

		new File(outputFile).write(ant.project.properties.cmdOut)
	}
	
	println "Jasmine tests completed in ${new Date().time - startTime}ms"
	println "Jasmine Tests ${testsFailed ? 'FAILED' : 'PASSED'} - view reports in ${outputDir}"
	ant.fail(if: testsFailed, message: 'JS Tests Failed')
}

task combineCss(dependsOn: 'init') << {
	ant.concat(destfile: "${cssOutputDir}/all.${version}.css") {
		fileset(dir: "${srcDir}/css", includes: '*.css')
	}
}

task combineJs(dependsOn: 'init') << {
	ant.concat(destfile: "${jsOutputDir}/all.${version}.js") {
		filelist(dir: "${srcDir}/js", files: 'main.js, stacktrace.js')
	}
	ant.concat(destfile: "${jsOutputDir}/sh.${version}.js") {
		filelist(dir: "${srcDir}/js/sh", files: 'shCore.js, shBrushBash.js, shBrushCss.js, shBrushGroovy.js, shBrushJava.js, shBrushJavaFX.js, shBrushJScript.js, shBrushPlain.js, shBrushPython.js, shBrushXml.js')
	}
}

task minifyCss(dependsOn: 'combineCss') << {
	ant.java(jar: 'lib/yuicompressor-2.4.4.jar', fork: true) {
		arg(value: '--line-break')
		arg(value: '0')
		arg(value: "${cssOutputDir}/all.${version}.css")
		arg(value: '-o')
		arg(value: "${cssOutputDir}/${cssOutputFile}")
	}
	ant.gzip(src: "${cssOutputDir}/${cssOutputFile}",
	 		destfile: "${cssOutputDir}/${cssOutputFile}.gz")
	ant.move(file: "${cssOutputDir}/${cssOutputFile}.gz",
	 		tofile: "${cssOutputDir}/${cssOutputFile}")
}

task minifyJs(dependsOn: 'combineJs') << {
	['all', 'sh'].each { type ->
		ant.java(jar: 'lib/yuicompressor-2.4.4.jar', fork: true) {
			arg(value: "${jsOutputDir}/${type}.${version}.js")
			arg(value: '-o')
			arg(value: "${jsOutputDir}/${type}.${version}-min.js")
		}
		ant.gzip(src: "${jsOutputDir}/${type}.${version}-min.js",
		 		destfile: "${jsOutputDir}/${type}.${version}-min.js.gz")
		ant.move(file: "${jsOutputDir}/${type}.${version}-min.js.gz",
		 		tofile: "${jsOutputDir}/${type}.${version}-min.js")
	}
}

task updateIncludes(dependsOn: ['minifyCss', 'minifyJs']) << {
	description = 'Update header.php and footer.php with new CSS/JS versions'
	def headerFile = new File("${phpSrcDir}/header.php")
	def newText = headerFile.text.replaceAll(/all\.[0-9a-f]+/, "all.${version}")
	headerFile.write(newText)
	
	def footerFile = new File("${phpSrcDir}/footer.php")
	newText = footerFile.text.replaceAll(/all\.[0-9a-f]+/, "all.${version}")
	footerFile.write(newText)
}

task uploadArtifactsToS3() {
	description = 'Uploads CSS and JS to AWS S3'

	doLast() {
		project.ant {
			ant.taskdef(resource: 'org/springframework/build/aws/ant/antlib.xml',
			 	classpath: configurations.antlibs.asPath)
			// NOTE: Keys defined in secret gradle.properties file
			s3(accessKey: accesskey, secretKey: secretkey) {
				upload(bucketName: 'eriwen-cdn', file: "${cssOutputDir}/${cssOutputFile}",
						toFile: "css/${cssOutputFile}", publicRead: 'true') {
					metadata(name: 'Content-Type', value: 'text/css')
					metadata(name: 'Cache-Control', value: 'public')
					metadata(name: 'Expires', value: 'Thu, 16 Apr 2015 20:00:00 GMT')
					metadata(name: 'Content-Encoding', value: 'gzip')
					metadata(name: 'Vary', value: 'Accept-Encoding')
				}
				upload(bucketName: 'eriwen-cdn', file: "${jsOutputDir}/${jsOutputFile}",
						toFile: "js/${jsOutputFile}", publicRead: 'true') {
					metadata(name: 'Content-Type', value: 'text/javascript')
					metadata(name: 'Cache-Control', value: 'public')
					metadata(name: 'Expires', value: 'Thu, 16 Apr 2015 20:00:00 GMT')
					metadata(name: 'Content-Encoding', value: 'gzip')
					metadata(name: 'Vary', value: 'Accept-Encoding')
				}
			}
		}
	}
}

task all(dependsOn: ['clean', 'jshint', 'csslint', 'test', 'updateIncludes', 'uploadArtifactsToS3']) << {
	println "Time to do 'git commit -am \"Releasing version ${version}\" && git push origin master'"
}